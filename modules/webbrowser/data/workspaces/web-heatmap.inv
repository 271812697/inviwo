<?xml version="1.0" encoding="UTF-8" ?>
<InviwoWorkspace version="3">
    <InviwoSetup>
        <Modules>
            <Module name="OpenGL" version="0">
                <Processors>
                    <Processor content="org.inviwo.CanvasGL"/>
                </Processors>
            </Module>
            <Module name="BrushingAndLinking" version="0">
                <Processors>
                    <Processor content="org.inviwo.BrushingAndLinkingProcessor"/>
                </Processors>
            </Module>
            <Module name="DataFrame" version="0">
                <Processors>
                    <Processor content="org.inviwo.SyntheticDataFrame"/>
                </Processors>
            </Module>
            <Module name="DataFrameQt" version="0">
                <Processors>
                    <Processor content="org.inviwo.DataFrameTable"/>
                </Processors>
            </Module>
            <Module name="WebBrowser" version="0">
                <Processors>
                    <Processor content="org.inviwo.BasicWebBrowser"/>
                </Processors>
            </Module>
        </Modules>
    </InviwoSetup>
    <ProcessorNetwork>
        <ProcessorNetworkVersion content="21"/>
        <Processors>
            <Processor type="org.inviwo.SyntheticDataFrame" identifier="SyntheticDataFrame" displayName="Synthetic DataFrame">
                <PortGroups/>
                <Properties>
                    <Property type="org.inviwo.Size_tProperty" identifier="numRow">
                        <MetaDataMap>
                            <MetaDataItem type="org.inviwo.StringStringStdUnorderedMapMetaData" key="SavedState"/>
                        </MetaDataMap>
                        <maxvalue content="20"/>
                        <value content="10"/>
                    </Property>
                    <Property type="org.inviwo.CompositeProperty" identifier="randomParams">
                        <Properties>
                            <Property type="org.inviwo.IntProperty" identifier="seed">
                                <MetaDataMap>
                                    <MetaDataItem type="org.inviwo.StringStringStdUnorderedMapMetaData" key="SavedState"/>
                                </MetaDataMap>
                                <value content="194"/>
                            </Property>
                        </Properties>
                    </Property>
                </Properties>
                <MetaDataMap>
                    <MetaDataItem type="org.inviwo.ProcessorMetaData" key="org.inviwo.ProcessorMetaData">
                        <position x="14400" y="-1525"/>
                        <visibility content="1"/>
                        <selection content="0"/>
                    </MetaDataItem>
                </MetaDataMap>
            </Processor>
            <Processor type="org.inviwo.DataFrameTable" identifier="DataFrameTable" displayName="DataFrame Table">
                <PortGroups/>
                <Properties/>
                <MetaDataMap>
                    <MetaDataItem type="org.inviwo.ProcessorMetaData" key="org.inviwo.ProcessorMetaData">
                        <position x="14400" y="-1450"/>
                        <visibility content="1"/>
                        <selection content="0"/>
                    </MetaDataItem>
                    <MetaDataItem type="org.inviwo.ProcessorWidgetMetaData" key="org.inviwo.ProcessorWidgetMetaData">
                        <position x="603" y="1181"/>
                        <dimensions x="1187" y="351"/>
                        <visibility content="1"/>
                        <fullScreen content="0"/>
                        <onTop content="1"/>
                    </MetaDataItem>
                </MetaDataMap>
            </Processor>
            <Processor type="org.inviwo.CanvasGL" identifier="Canvas4" displayName="Canvas">
                <PortGroups/>
                <Properties>
                    <Property type="org.inviwo.CompositeProperty" identifier="inputSize">
                        <Properties>
                            <Property type="org.inviwo.IntSize2Property" identifier="customInputDimensions">
                                <readonly content="1"/>
                                <value x="478" y="385"/>
                            </Property>
                        </Properties>
                    </Property>
                    <Property type="org.inviwo.IntProperty" identifier="colorLayer_">
                        <displayName content="Color Layer ID"/>
                        <semantics semantics="Default"/>
                        <visible content="0"/>
                        <readonly content="0"/>
                        <minConstraint content="2"/>
                        <maxConstraint content="1"/>
                        <minvalue content="0"/>
                        <maxvalue content="0"/>
                        <increment content="1"/>
                        <value content="0"/>
                    </Property>
                    <Property type="org.inviwo.DirectoryProperty" identifier="layerDir">
                        <absolutePath content=""/>
                        <workspaceRelativePath content=""/>
                        <ivwdataRelativePath content=""/>
                    </Property>
                </Properties>
                <MetaDataMap>
                    <MetaDataItem type="org.inviwo.ProcessorMetaData" key="org.inviwo.ProcessorMetaData">
                        <position x="14575" y="-1375"/>
                        <visibility content="1"/>
                        <selection content="0"/>
                    </MetaDataItem>
                    <MetaDataItem type="org.inviwo.ProcessorWidgetMetaData" key="org.inviwo.ProcessorWidgetMetaData">
                        <position x="1840" y="1159"/>
                        <dimensions x="713" y="745"/>
                        <visibility content="1"/>
                        <fullScreen content="0"/>
                        <onTop content="0"/>
                    </MetaDataItem>
                </MetaDataMap>
            </Processor>
            <Processor type="org.inviwo.BrushingAndLinkingProcessor" identifier="BrushingAndLinkingProcessor" displayName="Brushing And Linking Processor">
                <PortGroups/>
                <Properties/>
                <MetaDataMap>
                    <MetaDataItem type="org.inviwo.ProcessorMetaData" key="org.inviwo.ProcessorMetaData">
                        <position x="14575" y="-1525"/>
                        <visibility content="1"/>
                        <selection content="0"/>
                    </MetaDataItem>
                </MetaDataMap>
            </Processor>
            <Processor type="org.inviwo.BasicWebBrowser" identifier="BasicWebBrowser2" displayName="Basic Web Browser">
                <PortGroups/>
                <Properties>
                    <Property type="org.inviwo.StringProperty" identifier="html">
                        <MetaDataMap>
                            <MetaDataItem type="org.inviwo.IntMetaData" key="PropertyEditorWidgetDockStatus">
                                <MetaData content="0"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.BoolMetaData" key="PropertyEditorWidgetFloating">
                                <MetaData content="1"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.IntVec2MetaData" key="PropertyEditorWidgetPosition">
                                <MetaData x="496" y="721"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.IntVec2MetaData" key="PropertyEditorWidgetSize">
                                <MetaData x="1134" y="999"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.BoolMetaData" key="PropertyEditorWidgetSticky">
                                <MetaData content="0"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.BoolMetaData" key="PropertyEditorWidgetVisible">
                                <MetaData content="0"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.StringStringStdUnorderedMapMetaData" key="SavedState"/>
                        </MetaDataMap>
                        <value content='&lt;!DOCTYPE html&gt;&#x0A;&lt;html&gt;&#x0A;  &lt;head&gt;&#x0A;    &lt;meta charset=&quot;utf-8&quot;&gt;&#x0A;    &#x0A;    &lt;!--&#x0A;    * &quot;https://inviwo/yourmodulename/&quot; will be redirected to the&#x0A;        corresponding module directory.&#x0A;    * &quot;https://inviwo/app/&quot; will be redirected to the application&#x0A;        base path (InviwoApplication::getBasePath()) directory&#x0A;    * &quot;https://inviwo/app/static/code.js&quot; resolves to the JavaScript &#x0A;        property of this processor&#x0A;    --&gt;&#x0A;&#x0A;&#x0A;    &lt;style&gt;&#x0A;      body {&#x0A;        font-family: sans-serif;&#x0A;        overflow: hidden;&#x0A;        background: white;&#x0A;      }&#x0A;      .tooltip {&#x0A;        font-family: sans-serif;&#x0A;        font-size: 90%;&#x0A;        position: absolute;&#x0A;        background-color: white;&#x0A;        border: solid;&#x0A;        border-width: 2px;&#x0A;        border-radius: 5px;&#x0A;        padding: 5px;&#x0A;      }&#x0A;    &lt;/style&gt;&#x0A;  &lt;/head&gt;&#x0A;&#x0A;  &lt;body&gt;&#x0A;    &lt;!-- Create a div where the graph will take place --&gt;&#x0A;    &lt;div id=&quot;my_dataviz&quot;&gt;&lt;/div&gt;&#x0A;  &lt;/body&gt;&#x0A;&#x0A;  &lt;script type=&quot;module&quot;&gt;&#x0A;    // load the javascript code associated with the processor&#x0A;    import * as code from &quot;https://inviwo/app/static/code.js&quot;&#x0A;  &lt;/script&gt;&#x0A;&lt;/html&gt;'/>
                    </Property>
                    <Property type="org.inviwo.StringProperty" identifier="code">
                        <MetaDataMap>
                            <MetaDataItem type="org.inviwo.IntMetaData" key="PropertyEditorWidgetDockStatus">
                                <MetaData content="0"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.BoolMetaData" key="PropertyEditorWidgetFloating">
                                <MetaData content="1"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.IntVec2MetaData" key="PropertyEditorWidgetPosition">
                                <MetaData x="2593" y="849"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.IntVec2MetaData" key="PropertyEditorWidgetSize">
                                <MetaData x="1054" y="1331"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.BoolMetaData" key="PropertyEditorWidgetSticky">
                                <MetaData content="0"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.BoolMetaData" key="PropertyEditorWidgetVisible">
                                <MetaData content="0"/>
                            </MetaDataItem>
                            <MetaDataItem type="org.inviwo.StringStringStdUnorderedMapMetaData" key="SavedState"/>
                        </MetaDataMap>
                        <value content='// Load the inviwo javascript api&#x0A;import * as inviwo from &quot;https://inviwo/webbrowser/data/js/inviwoapiv2.js&quot;&#x0A;import * as d3 from &quot;https://cdn.jsdelivr.net/npm/d3@7/+esm&quot;;&#x0A;&#x0A;// Code from d3-graph-gallery.com&#x0A;&#x0A;// create a pivot table with one entry per row from a DataFrame table&#x0A;//&#x0A;// Example DataFrame input: &#x0A;//    [ &#x0A;//      {&quot;col 1&quot;: 0, &quot;col 2&quot;: 1, &quot;col 3&quot;: 3}, &#x0A;//      {&quot;col 1&quot;: 1, &quot;col 2&quot;: 2, &quot;col 3&quot;: 6}, &#x0A;//    ]&#x0A;// output:&#x0A;//    [&#x0A;//      { &quot;col&quot;: &quot;col 1&quot;, &quot;row&quot;: 1, &quot;value&quot;: 0 },&#x0A;//      { &quot;col&quot;: &quot;col 2&quot;, &quot;row&quot;: 1, &quot;value&quot;: 1 },&#x0A;//      { &quot;col&quot;: &quot;col 3&quot;, &quot;row&quot;: 1, &quot;value&quot;: 3 },&#x0A;//      { &quot;col&quot;: &quot;col 1&quot;, &quot;row&quot;: 2, &quot;value&quot;: 1 },&#x0A;//      ...&#x0A;//    ]&#x0A;function createPivotTable(table) {&#x0A;  // identify and sort column names alphanumerically&#x0A;  const columnNames = Object.keys(table[0]).sort((a, b) =&gt; a.localeCompare(b, &apos;en&apos;, { numeric: true }));&#x0A;&#x0A;  return table.reduce((acc, row, rowIndex) =&gt; {&#x0A;    for (const [colIndex, col] of columnNames.entries()) {&#x0A;      acc.push({ &apos;col&apos;: col, &apos;row&apos;: rowIndex + 1, &apos;value&apos;: row[col], &quot;colIndex&quot;: colIndex, &quot;rowIndex&quot;: rowIndex});&#x0A;    }&#x0A;    return acc;&#x0A;  }, []);&#x0A;}&#x0A;&#x0A;&#x0A;// set the dimensions and margins of the graph&#x0A;const margin = {top: 80, right: 25, bottom: 60, left: 40},&#x0A;  width = 450 - margin.left - margin.right,&#x0A;  height = 490 - margin.top - margin.bottom;&#x0A;&#x0A;// append the svg object to the body of the page&#x0A;const svgGroup = d3.select(&quot;#my_dataviz&quot;)&#x0A;.append(&quot;svg&quot;)&#x0A;  .attr(&quot;width&quot;, width + margin.left + margin.right)&#x0A;  .attr(&quot;height&quot;, height + margin.top + margin.bottom)&#x0A;.append(&quot;g&quot;)&#x0A;  .attr(&quot;id&quot;, &quot;plottransform&quot;)&#x0A;  .attr(&quot;transform&quot;, `translate(${margin.left}, ${margin.top})`);&#x0A;&#x0A;// Add title to graph&#x0A;svgGroup.append(&quot;text&quot;)&#x0A;        .attr(&quot;x&quot;, 0)&#x0A;        .attr(&quot;y&quot;, -50)&#x0A;        .attr(&quot;text-anchor&quot;, &quot;left&quot;)&#x0A;        .style(&quot;font-size&quot;, &quot;22px&quot;)&#x0A;        .text(&quot;A d3.js heatmap&quot;);&#x0A;&#x0A;// Add subtitle to graph&#x0A;svgGroup.append(&quot;text&quot;)&#x0A;        .attr(&quot;x&quot;, 0)&#x0A;        .attr(&quot;y&quot;, -20)&#x0A;        .attr(&quot;text-anchor&quot;, &quot;left&quot;)&#x0A;        .style(&quot;font-size&quot;, &quot;14px&quot;)&#x0A;        .style(&quot;fill&quot;, &quot;grey&quot;)&#x0A;        .style(&quot;max-width&quot;, 400)&#x0A;        .text(&quot;d3.js heatmap filled with data from a DataFrame.&quot;);&#x0A;&#x0A;&#x0A;// create a tooltip, uses CSS style from above&#x0A;const tooltip = d3.select(&quot;#my_dataviz&quot;)&#x0A;  .append(&quot;div&quot;)&#x0A;  .style(&quot;opacity&quot;, 0)&#x0A;  .attr(&quot;class&quot;, &quot;tooltip&quot;);&#x0A;&#x0A;// Three functions that change the tooltip when user hover / move / leave a cell&#x0A;const mouseover = function(event,d) {&#x0A;  tooltip.style(&quot;opacity&quot;, 1)&#x0A;  d3.select(this)&#x0A;    .style(&quot;stroke&quot;, &quot;cornflowerblue&quot;)&#x0A;}&#x0A;const mousemove = function(event,d) {&#x0A;  tooltip&#x0A;    .html(`&lt;b&gt;${d.col}, ${d.row}&lt;br&gt;col: ${d.colIndex}, row: ${d.rowIndex}:&lt;/b&gt; ${d.value}`)&#x0A;    .style(&quot;left&quot;, (event.x + 10) + &quot;px&quot;)&#x0A;    .style(&quot;top&quot;, (event.y + 10) + &quot;px&quot;)&#x0A;}&#x0A;const mouseleave = function(event, d) {&#x0A;  tooltip.style(&quot;opacity&quot;, 0)&#x0A;  d3.select(this)&#x0A;    .style(&quot;stroke&quot;, &quot;none&quot;)&#x0A;}&#x0A;&#x0A;&#x0A;function plot(data, dataRange, enter, exit) {&#x0A;  // adjust spacing between blocks [0, 1]&#x0A;  const spacing = 0.1;&#x0A;&#x0A;  // remove previous plot and axes&#x0A;  svgGroup.select(&quot;#plot&quot;).remove();&#x0A;  // start from scratch&#x0A;  var plot = svgGroup.append(&quot;g&quot;)&#x0A;      .attr(&quot;id&quot;, &quot;plot&quot;);&#x0A;&#x0A;  // Labels of row and columns -&gt; unique identifier of the column called &apos;col&apos; and &apos;row&apos;&#x0A;  const myCols = Array.from(new Set(data.map(d =&gt; d.col)))&#x0A;  const myRows = Array.from(new Set(data.map(d =&gt; d.row)))&#x0A;&#x0A;  // Build X scales and axis:&#x0A;  const x = d3.scaleBand()&#x0A;    .range([ 0, width ])&#x0A;    .domain(myCols)&#x0A;    .padding(spacing);&#x0A;&#x0A;  var xAxis = plot.append(&quot;g&quot;)&#x0A;    .style(&quot;font-size&quot;, 15)&#x0A;    .attr(&quot;transform&quot;, `translate(0, ${height})`)&#x0A;    .call(d3.axisBottom(x).tickSize(0));&#x0A;  xAxis.select(&quot;.domain&quot;).remove();&#x0A;&#x0A;  xAxis.selectAll(&quot;text&quot;)&#x0A;    .style(&quot;text-anchor&quot;, &quot;end&quot;)&#x0A;    .attr(&quot;dx&quot;, &quot;-.4em&quot;)&#x0A;    .attr(&quot;dy&quot;, &quot;.5em&quot;)&#x0A;    .attr(&quot;transform&quot;, &quot;rotate(-45)&quot;);&#x0A;&#x0A;  // Build Y scales and axis:&#x0A;  const y = d3.scaleBand()&#x0A;    .range([ height, 0 ])&#x0A;    .domain(myRows)&#x0A;    .padding(spacing);&#x0A;&#x0A;  plot.append(&quot;g&quot;)&#x0A;    .style(&quot;font-size&quot;, 15)&#x0A;    .call(d3.axisLeft(y).tickSize(0))&#x0A;    .select(&quot;.domain&quot;).remove()&#x0A;&#x0A;  // Build color scale&#x0A;  const myColor = d3.scaleSequential()&#x0A;    .interpolator(d3.interpolateInferno)&#x0A;    .domain(dataRange)&#x0A;&#x0A;  // add the squares&#x0A;  plot.selectAll(&quot;rect&quot;)&#x0A;    .data(data, function(d) {return d.col+&apos;:&apos;+d.row;})&#x0A;    .join(&quot;rect&quot;)&#x0A;      .attr(&quot;x&quot;, function(d) { return x(d.col) })&#x0A;      .attr(&quot;y&quot;, function(d) { return y(d.row) })&#x0A;      .attr(&quot;rx&quot;, 2)&#x0A;      .attr(&quot;ry&quot;, 2)&#x0A;      .attr(&quot;width&quot;, x.bandwidth() )&#x0A;      .attr(&quot;height&quot;, y.bandwidth() )&#x0A;      .style(&quot;fill&quot;, function(d) { return myColor(d.value)} )&#x0A;      .style(&quot;stroke-width&quot;, 4)&#x0A;      .style(&quot;stroke&quot;, &quot;none&quot;)&#x0A;    .on(&quot;mouseover&quot;, async (e, d) =&gt; {&#x0A;        mouseover(e,d);&#x0A;        enter(e,d);&#x0A;    })&#x0A;    .on(&quot;mousemove&quot;, mousemove)&#x0A;    .on(&quot;mouseleave&quot;, async (e, d) =&gt; {&#x0A;        mouseleave(e,d); &#x0A;        exit(e,d);&#x0A;    });&#x0A;&#x0A;    return plot;&#x0A;}&#x0A;&#x0A;function rgba(color) {&#x0A;    const r = Math.round(color[0]*255);    &#x0A;    const g = Math.round(color[1]*255);    &#x0A;    const b = Math.round(color[2]*255);    &#x0A;    const a = Math.round(color[3]*255);    &#x0A;    return `rgba(${r},${g},${b},${a})`&#x0A;}&#x0A;&#x0A;// Put the inviwo module into global scope so that the api can interact with in from c++&#x0A;globalThis.inviwo = inviwo&#x0A;&#x0A;// Register a function for inviwo to call on processor process&#x0A;// The function will be called with an instance of the processor. &#x0A;// The processor has the following properties:&#x0A;//  * changedInports: A list of the identifiers for all the port that has changed&#x0A;//  * changedProperties A list of the identifiers for all the identifiers that has changed&#x0A;//  * self.changedBrushing A list of the modified brushing targets that has changed&#x0A;//  * loaded a boolean specifying if the webpage was just loaded&#x0A;// Then there are the standard processor functions&#x0A;//  * properties()&#x0A;//  * property(identifier)&#x0A;//  * inports()&#x0A;//  * inport(identifier)&#x0A;//  * outports()&#x0A;//  * outport(identifier)  &#x0A;globalThis.inviwoProcess = async function (self) {&#x0A;    try {&#x0A;        if (self.changedInports.includes(&quot;dataframe&quot;) || self.loaded) {   &#x0A;            const json = await self.inport(&quot;dataframe&quot;).getData();&#x0A;            if (json instanceof Array) {    &#x0A;                const data = createPivotTable(json);&#x0A;                const range = [ &#x0A;                     data.reduce((acc, {value: v}) =&gt; Math.min(acc, v), Number.MAX_VALUE),&#x0A;                     data.reduce((acc, {value: v}) =&gt; Math.max(acc, v), -Number.MAX_VALUE)&#x0A;                ];&#x0A;&#x0A;                const enter = async (a,d) =&gt; {&#x0A;                    await self.inport(&quot;brushing&quot;).highlight([d.rowIndex], &quot;row&quot;);&#x0A;                    await self.inport(&quot;brushing&quot;).highlight([d.colIndex], &quot;column&quot;);&#x0A;                };&#x0A;                const exit = async (a,d) =&gt; {&#x0A;                    await self.inport(&quot;brushing&quot;).highlight([]);&#x0A;                };&#x0A;&#x0A;                this.plot = plot(data, range, enter, exit);&#x0A;            }&#x0A;        }&#x0A;        if (self.changedBrushing.map((x) =&gt; x[1]).includes(&quot;Highlighted&quot;) &#x0A;            || self.changedProperties.includes(&quot;color&quot;)&#x0A;            || self.loaded) {&#x0A;&#x0A;            const color = await self.property(&quot;extra&quot;).property(&quot;color&quot;).get();        &#x0A;            const highlightedRows = await self.inport(&quot;brushing&quot;).getHighlightedIndices(&quot;row&quot;);&#x0A;            const highlightedCols = await self.inport(&quot;brushing&quot;).getHighlightedIndices(&quot;column&quot;);&#x0A;            this.plot.selectAll(&quot;rect&quot;)&#x0A;                     .style(&quot;stroke&quot;, &quot;none&quot;);          &#x0A;            this.plot.selectAll(&quot;rect&quot;)&#x0A;                     .filter((d) =&gt; highlightedRows.includes(d.rowIndex) || highlightedCols.includes(d.colIndex))&#x0A;                     .style(&quot;stroke&quot;, rgba(color.value));&#x0A;        }&#x0A;    } catch(e) {&#x0A;        if (e instanceof Error) {&#x0A;            console.error(e.toString())&#x0A;        } else {&#x0A;            console.error(JSON.stringify(e))&#x0A;        }&#x0A;    }&#x0A;}&#x0A;'/>
                    </Property>
                    <Property type="org.inviwo.DoubleProperty" identifier="zoom">
                        <value content="1.6"/>
                    </Property>
                    <Property type="org.inviwo.OptionPropertyString" identifier="propertyTypes">
                        <selectedIdentifier content="org.inviwo.FloatVec4Property"/>
                    </Property>
                    <Property type="org.inviwo.StringProperty" identifier="name">
                        <value content="color"/>
                    </Property>
                    <Property type="org.inviwo.CompositeProperty" identifier="extra">
                        <OwnedPropertyIdentifiers>
                            <PropertyIdentifier content="color"/>
                        </OwnedPropertyIdentifiers>
                        <Properties>
                            <Property type="org.inviwo.FloatVec4Property" identifier="color">
                                <displayName content="color"/>
                                <semantics semantics="Color"/>
                                <visible content="1"/>
                                <readonly content="0"/>
                                <MetaDataMap>
                                    <MetaDataItem type="org.inviwo.StringStringStdUnorderedMapMetaData" key="SavedState"/>
                                </MetaDataMap>
                                <minConstraint content="0"/>
                                <maxConstraint content="0"/>
                                <minvalue x="0" y="0" z="0" w="0"/>
                                <maxvalue x="1" y="1" z="1" w="1"/>
                                <increment x="0.01" y="0.01" z="0.01" w="0.01"/>
                                <value x="0.29803923" y="0.047058824" z="0.2901961" w="1"/>
                            </Property>
                        </Properties>
                    </Property>
                </Properties>
                <MetaDataMap>
                    <MetaDataItem type="org.inviwo.ProcessorMetaData" key="org.inviwo.ProcessorMetaData">
                        <position x="14575" y="-1450"/>
                        <visibility content="1"/>
                        <selection content="0"/>
                    </MetaDataItem>
                </MetaDataMap>
            </Processor>
        </Processors>
        <Connections>
            <Connection src="BasicWebBrowser2.webpage" dst="Canvas4.inport"/>
            <Connection src="SyntheticDataFrame.dataFrame_" dst="BasicWebBrowser2.dataframe"/>
            <Connection src="SyntheticDataFrame.dataFrame_" dst="DataFrameTable.inport"/>
            <Connection src="BrushingAndLinkingProcessor.outport" dst="DataFrameTable.brushingAndLinking"/>
            <Connection src="BrushingAndLinkingProcessor.outport" dst="BasicWebBrowser2.brushing"/>
        </Connections>
        <PropertyLinks/>
    </ProcessorNetwork>
    <PortInspectors/>
    <WorkspaceAnnotations>
        <Properties>
            <Property type="org.inviwo.StringProperty" identifier="author">
                <value content="Inviwo Team"/>
            </Property>
            <Property type="org.inviwo.StringProperty" identifier="tags">
                <value content="Example;"/>
            </Property>
            <Property type="org.inviwo.StringProperty" identifier="categories">
                <value content="Examples;"/>
            </Property>
        </Properties>
        <Canvases>
            <CanvasImage>
                <name content="Canvas"/>
                <size x="245" y="256"/>
                <base64 content=""/>
            </CanvasImage>
        </Canvases>
        <Network>
            <name content="Network"/>
            <size x="256" y="256"/>
            <base64 content="/9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAIBAQEBAQIBAQECAgICAgQDAgICAgUEBAMEBgUGBgYFBgYGBwkIBgcJBwYGCAsICQoKCgoKBggLDAsKDAkKCgr/2wBDAQICAgICAgUDAwUKBwYHCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgr/wAARCAEAAQADASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwAooorQAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigArkvGEXxSt7+S78MXAntZJ4litofJDxLt+dmMoAIyOgJPPT062igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAP/9k="/>
        </Network>
    </WorkspaceAnnotations>
    <AnimationController>
        <Properties>
            <Property type="org.inviwo.CompositeProperty" identifier="PlayOptions">
                <Properties/>
                <collapsed content="1"/>
            </Property>
            <Property type="org.inviwo.CompositeProperty" identifier="RenderOptions">
                <Properties>
                    <Property type="org.inviwo.BoolCompositeProperty" identifier="image">
                        <Properties>
                            <Property type="org.inviwo.DirectoryProperty" identifier="outputDirectory">
                                <absolutePath content=""/>
                                <workspaceRelativePath content=""/>
                                <ivwdataRelativePath content=""/>
                            </Property>
                        </Properties>
                    </Property>
                    <Property type="org.inviwo.BoolCompositeProperty" identifier="ffmpeg">
                        <Properties>
                            <Property type="org.inviwo.FileProperty" identifier="file">
                                <absolutePath content=""/>
                                <workspaceRelativePath content=""/>
                                <ivwdataRelativePath content=""/>
                            </Property>
                        </Properties>
                    </Property>
                    <Property type="org.inviwo.BoolCompositeProperty" identifier="exporter">
                        <Properties>
                            <Property type="org.inviwo.DirectoryProperty" identifier="outputDirectory">
                                <absolutePath content=""/>
                                <workspaceRelativePath content=""/>
                                <ivwdataRelativePath content=""/>
                            </Property>
                        </Properties>
                    </Property>
                </Properties>
                <collapsed content="1"/>
            </Property>
            <Property type="org.inviwo.CompositeProperty" identifier="controlOptions">
                <Properties/>
                <collapsed content="1"/>
            </Property>
        </Properties>
    </AnimationController>
    <MainAnimationIndex content="0"/>
    <Animations>
        <Animation>
            <name content="Animation 1"/>
        </Animation>
    </Animations>
</InviwoWorkspace>
