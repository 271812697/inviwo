/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2018 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *********************************************************************************/

#include <modules/webbrowser/webbrowsermodule.h>
#include <modules/webbrowser/processors/webbrowserprocessor.h>
#include <modules/webbrowser/webbrowserapp.h>

#include <inviwo/core/util/filesystem.h>
#include <inviwo/core/util/settings/systemsettings.h>

#include <modules/opengl/shader/shadermanager.h>

// Autogenerated
#include <modules/webbrowser/shader_resources.h>

#include <warn/push>
#include <warn/ignore/all>
#include "include/cef_app.h"
#include "include/cef_command_line.h"
#include "include/cef_parser.h"
#include <warn/pop>

namespace inviwo {

WebBrowserModule::WebBrowserModule(InviwoApplication* app)
    : InviwoModule(app, "WebBrowser")
    // Call 60 times per second
    , doChromiumWork_(Timer::Milliseconds(1000 / 60), []() { CefDoMessageLoopWork(); }) {

    if (!app->getSystemSettings().enablePickingProperty_) {
		LogInfo("Enabling picking system setting since it is required for interaction (View->Settings->System settings->Enable picking).");
		app->getSystemSettings().enablePickingProperty_.set(true);
    }
    // CEF initialization
    // Specify the path for the sub-process executable.
    auto exeExtension = filesystem::getFileExtension(filesystem::getExecutablePath());
    // Assume that inviwo_web_helper is next to the main executable
    auto exeDirectory = filesystem::getFileDirectory(filesystem::getExecutablePath());
    auto subProcessExecutable = exeDirectory + "/inviwo_helper." + exeExtension;
    auto locale = app->getUILocale().name();
    if (locale == "C") {
        // Crash when default locale "C" is used. Reproduce with GLFWMinimum application
        locale = std::locale("en_US").name();
    }

    void* sandbox_info = NULL; // Windows specific 

#ifdef DARWIN  // Mac specific

    // Find CEF framework and helper app in
    // exe.app/Contents/Frameworks directory first
    auto cefParentDir = filesystem::getCanonicalPath(exeDirectory + std::string("/.."));
    auto frameworkDirectory = cefParentDir + "/Frameworks/Chromium Embedded Framework.framework";
    auto frameworkPath = frameworkDirectory + "/Chromium Embedded Framework";
    // Load the CEF framework library at runtime instead of linking directly
    // as required by the macOS sandbox implementation.
    if (!cefLib_.LoadInMain()) {
        throw ModuleInitException("Could not find Chromium Embedded Framework.framework: " + frameworkPath);
    }

    CefMainArgs args(app->getCommandLineParser().getARGC(), app->getCommandLineParser().getARGV());
    CefSettings settings;
    CefString(&settings.framework_dir_path)
        .FromASCII((frameworkDirectory).c_str());
    // Crashes if not set and non-default locale is used
    CefString(&settings.locales_dir_path)
        .FromASCII((frameworkDirectory +
                    std::string("/Resources"))
                       .c_str());
    CefString(&settings.resources_dir_path)
        .FromASCII((frameworkDirectory +
                    std::string("/Resources"))
                       .c_str());
    // Locale returns "en_US.UFT8" but "en.UTF8" is needed by CEF
    auto startErasePos = locale.find('_');
    if (startErasePos != std::string::npos) {
        locale.erase(startErasePos, locale.find('.') - startErasePos);
    }

    // Web helper executable should be located in Frameworks dir of bundle,
    // see OS_MACOSX part in CMakeLists.txt
    if (!filesystem::fileExists(subProcessExecutable)) {
        subProcessExecutable =
            cefParentDir +
            std::string("/Frameworks/Inviwo Helper.app/Contents/MacOS/inviwo_helper");
    }
#else
    CefMainArgs args;
    CefSettings settings;
#endif

#ifdef WIN32
    // Enable High-DPI support on Windows 7 or newer.
    CefEnableHighDPISupport();
#if defined(CEF_USE_SANDBOX)
    // Manage the life span of the sandbox information object. This is necessary
    // for sandbox support on Windows. See cef_sandbox_win.h for complete details.
    CefScopedSandboxInfo scoped_sandbox;
    sandbox_info = scoped_sandbox.sandbox_info();
#endif
#endif
    // When generating projects with CMake the CEF_USE_SANDBOX value will be defined
    // automatically. Pass -DUSE_SANDBOX=OFF to the CMake command-line to disable
    // use of the sandbox.
#if !defined(CEF_USE_SANDBOX)
        settings.no_sandbox = true;
#endif
    // checkout detailed settings options
    // http://magpcss.org/ceforum/apidocs/projects/%28default%29/_cef_settings_t.html nearly all
    // the settings can be set via args too.
    settings.multi_threaded_message_loop = false;  // not supported, except windows
    // We want to use off-screen rendering
    settings.windowless_rendering_enabled = true;
    
    // CefString(&settings.cache_path).FromASCII("");
    // CefString(&settings.log_file).FromASCII("");
    // settings.log_severity = LOGSEVERITY_WARNING;


    CefString(&settings.locale).FromASCII(locale.c_str());

    if (!filesystem::fileExists(subProcessExecutable)) {
        throw ModuleInitException("Could not find web helper executable:" + subProcessExecutable);
    }
    CefString(&settings.browser_subprocess_path).FromASCII(subProcessExecutable.c_str());
    
    // Optional implementation of the CefApp interface.
    CefRefPtr<WebBrowserApp> browserApp(new WebBrowserApp);

    bool result = CefInitialize(args, settings, browserApp, sandbox_info);

    if (!result) {
        throw ModuleInitException("Failed to initialize Chromium Embedded Framework");
    }

    // Add a directory to the search path of the Shadermanager
    webbrowser::addShaderResources(ShaderManager::getPtr(), {getPath(ModulePath::GLSL)});
    // ShaderManager::getPtr()->addShaderSearchPath(getPath(ModulePath::GLSL));

    // Register objects that can be shared with the rest of inviwo here:

    // Processors
    registerProcessor<WebBrowserProcessor>();

    doChromiumWork_.start();
}

WebBrowserModule::~WebBrowserModule() {
    // Stop message pumping and make sure that app has finished processing before CefShutdown
    doChromiumWork_.stop();
    app_->waitForPool();
    CefShutdown();
}
    
std::string WebBrowserModule::getDataURI(const std::string& data, const std::string& mime_type) {
    return "data:" + mime_type + ";base64," +
    CefURIEncode(CefBase64Encode(data.data(), data.size()), false)
    .ToString();
}
    
std::string WebBrowserModule::getCefErrorString(cef_errorcode_t code) {
#define CASE(code) \
case code:       \
return #code

switch (code) {
        CASE(ERR_NONE);
        CASE(ERR_FAILED);
        CASE(ERR_ABORTED);
        CASE(ERR_INVALID_ARGUMENT);
        CASE(ERR_INVALID_HANDLE);
        CASE(ERR_FILE_NOT_FOUND);
        CASE(ERR_TIMED_OUT);
        CASE(ERR_FILE_TOO_BIG);
        CASE(ERR_UNEXPECTED);
        CASE(ERR_ACCESS_DENIED);
        CASE(ERR_NOT_IMPLEMENTED);
        CASE(ERR_CONNECTION_CLOSED);
        CASE(ERR_CONNECTION_RESET);
        CASE(ERR_CONNECTION_REFUSED);
        CASE(ERR_CONNECTION_ABORTED);
        CASE(ERR_CONNECTION_FAILED);
        CASE(ERR_NAME_NOT_RESOLVED);
        CASE(ERR_INTERNET_DISCONNECTED);
        CASE(ERR_SSL_PROTOCOL_ERROR);
        CASE(ERR_ADDRESS_INVALID);
        CASE(ERR_ADDRESS_UNREACHABLE);
        CASE(ERR_SSL_CLIENT_AUTH_CERT_NEEDED);
        CASE(ERR_TUNNEL_CONNECTION_FAILED);
        CASE(ERR_NO_SSL_VERSIONS_ENABLED);
        CASE(ERR_SSL_VERSION_OR_CIPHER_MISMATCH);
        CASE(ERR_SSL_RENEGOTIATION_REQUESTED);
        CASE(ERR_CERT_COMMON_NAME_INVALID);
        CASE(ERR_CERT_DATE_INVALID);
        CASE(ERR_CERT_AUTHORITY_INVALID);
        CASE(ERR_CERT_CONTAINS_ERRORS);
        CASE(ERR_CERT_NO_REVOCATION_MECHANISM);
        CASE(ERR_CERT_UNABLE_TO_CHECK_REVOCATION);
        CASE(ERR_CERT_REVOKED);
        CASE(ERR_CERT_INVALID);
        CASE(ERR_CERT_END);
        CASE(ERR_INVALID_URL);
        CASE(ERR_DISALLOWED_URL_SCHEME);
        CASE(ERR_UNKNOWN_URL_SCHEME);
        CASE(ERR_TOO_MANY_REDIRECTS);
        CASE(ERR_UNSAFE_REDIRECT);
        CASE(ERR_UNSAFE_PORT);
        CASE(ERR_INVALID_RESPONSE);
        CASE(ERR_INVALID_CHUNKED_ENCODING);
        CASE(ERR_METHOD_NOT_SUPPORTED);
        CASE(ERR_UNEXPECTED_PROXY_AUTH);
        CASE(ERR_EMPTY_RESPONSE);
        CASE(ERR_RESPONSE_HEADERS_TOO_BIG);
        CASE(ERR_CACHE_MISS);
        CASE(ERR_INSECURE_RESPONSE);
    default:
        return "UNKNOWN";
}
}
}  // namespace inviwo
